var fixedPoint = [0,30.0,0];
var g = 3.0
var mass1,mass2;
var length1,length2;
var phi1,phi2,vphi1,vphi2;
var dt = 0.0001;
var theta1,vtheta1,theta2,vtheta2;
function initSinglePendulum() {
	mass1 = 1.0;
	length1 = 10.0;
	theta1 = 1.0;
	phi1 = 0.0;
	vtheta1 = 0.0;
	vphi1 = 0.0;
}

function initDoublePendulum() {
	mass1 = 1.0;
	mass2 = 0.5
	length1 = 10.0
	length2 = 10.0;
	theta1 = 1.0;
	theta2 = 2.0;
	phi1 = 1.0;
	phi2 = 2.5;
	vtheta1 = 0.0;
	vtheta2 = 0.0;
	vphi1 = 1.5;
	vphi2 = 0.0;
}

function updateSinglePendulum() {
	F = rhsSinglePendulum();
	theta1 = theta1 + vtheta1*dt;
	phi1 = phi1 + vphi1*dt;
	vtheta1 = vtheta1 + F[0]*dt;
	vphi1 = vphi1 + F[1]*dt;
}

function updateDoublePendulum() {
	F = rhsDoublePendulum();
	theta1 = theta1 + vtheta1*dt;
	theta2 = theta2 + vtheta2*dt;
	phi1 = phi1 + vphi1*dt;
	phi2 = phi2 + vphi2*dt;
	vtheta1 = vtheta1 + F[0]*dt;
	vtheta2 = vtheta2 + F[1]*dt;
	vphi1 = vphi1 + F[2]*dt;
	vphi2 = vphi2 + F[3]*dt;
}

function getSinglePendulumP1() {
	return [length1*Math.sin(theta1)*Math.cos(phi1),length1*Math.sin(theta1)*Math.sin(phi1),-length1*Math.cos(theta1)];
}
function getDoublePendulumP1() {
	return [length1*Math.sin(theta1)*Math.cos(phi1),length1*Math.sin(theta1)*Math.sin(phi1),-length1*Math.cos(theta1)];
}
function getDoublePendulumP2() {
	P1 = getDoublePendulumP1()
	return [P1[0] + length2*Math.sin(theta2)*Math.cos(phi2),P1[1] + length2*Math.sin(theta2)*Math.sin(phi2),P1[2]-length2*Math.cos(theta2)];
}
function getSinglePendulumV() {
	v = [0,0];
	v[0] = length1*vtheta1;
	v[1] = length1*vphi1*Math.sin(theta1);
	return Math.sqrt(v[0]*v[0] + v[1]*v[1]);
}
function getDoublePendulumV1() {
	v = [0,0];
	v[0] = length1*vtheta1;
	v[1] = length1*vphi1*Math.sin(theta1);
	return Math.sqrt(v[0]*v[0] + v[1]*v[1]);
}
function getDoublePendulumV2() {
	v = [0,0];
	v[0] = length1*vtheta1 + length2*vtheta2;
	v[1] = length1*vphi1*Math.sin(theta1) + length2*vphi2*Math.sin(theta2);
	return Math.sqrt(v[0]*v[0] + v[1]*v[1]);
}
function getSinglePendulumE() {
	P1 = getSinglePendulumP1();
	v = [0,0];
	v[0] = length1*vtheta1;
	v[1] = length1*vphi1*Math.sin(theta1);

	K = 0.5*mass1* (v[0]*v[0] + v[1]*v[1]);
	P = mass1*g*(P1[2]+10);
	return K+P;
}
function getDoublePendulumE() {
	sintheta1 = Math.sin(theta1)
	sintheta2 = Math.sin(theta2)
	costheta1 = Math.cos(theta1)
	costheta2 = Math.cos(theta2)
	sinphi1   = Math.sin(phi1)
	sinphi2   = Math.sin(phi2)
	cosphi1   = Math.cos(phi1)
	cosphi2   = Math.cos(phi2)
	return 120-g*length1*mass1*costheta1 - (length1*costheta1 + length2*costheta2)*g*mass2 + 1/2*(length1*length1*sintheta1*sintheta1*vtheta1*vtheta1 + (length1*cosphi1*sintheta1*vphi1 + length1*costheta1*sinphi1*vtheta1)*(length1*cosphi1*sintheta1*vphi1 + length1*costheta1*sinphi1*vtheta1) + (length1*sinphi1*sintheta1*vphi1 - length1*cosphi1*costheta1*vtheta1)*(length1*sinphi1*sintheta1*vphi1 - length1*cosphi1*costheta1*vtheta1))*mass1 + 1/2*((length1*cosphi1*sintheta1*vphi1 + length2*cosphi2*sintheta2*vphi2 + length1*costheta1*sinphi1*vtheta1 + length2*costheta2*sinphi2*vtheta2)*(length1*cosphi1*sintheta1*vphi1 + length2*cosphi2*sintheta2*vphi2 + length1*costheta1*sinphi1*vtheta1 + length2*costheta2*sinphi2*vtheta2) + (length1*sinphi1*sintheta1*vphi1 + length2*sinphi2*sintheta2*vphi2 - length1*cosphi1*costheta1*vtheta1 - length2*cosphi2*costheta2*vtheta2)*(length1*sinphi1*sintheta1*vphi1 + length2*sinphi2*sintheta2*vphi2 - length1*cosphi1*costheta1*vtheta1 - length2*cosphi2*costheta2*vtheta2) + (length1*sintheta1*vtheta1 + length2*sintheta2*vtheta2)*(length1*sintheta1*vtheta1 + length2*sintheta2*vtheta2))*mass2;
}
function rhsSinglePendulum() {
	ddtheta1 = vphi1*vphi1*Math.sin(theta1)*Math.cos(theta1) - (g/length1)*Math.sin(theta1);
	if(theta1 == 0){
		ddphi1 = 0
	} else {
		ddphi1 = -2*vphi1*vtheta1*Math.cos(theta1)/Math.sin(theta1);
	}
	return [ddtheta1,ddphi1];
}

function rhsDoublePendulum() {
	if(theta1 < 0.1 || theta1 < 0.1){
		ddphi1 = 0
		ddphi2 = 0
	} else {
		ddphi1 = DPphi1dotdot()
		ddphi2 = DPphi2dotdot()
	}
	return [DPtheta1dotdot(),DPtheta2dotdot(),DPphi1dotdot(),DPphi2dotdot()];
}

function DPtheta1dotdot(){
	sintheta1 = Math.sin(theta1)
	sintheta2 = Math.sin(theta2)
	costheta1 = Math.cos(theta1)
	costheta2 = Math.cos(theta2)
	sinphi1   = Math.sin(phi1)
	sinphi2   = Math.sin(phi2)
	cosphi1   = Math.cos(phi1)
	cosphi2   = Math.cos(phi2)
	return -(((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta2*sintheta2*sintheta2*vphi2*vphi2 + (((length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1 - (length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (2*length1*mass1*cosphi1*cosphi1 - length1*mass1 - length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1 - (length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (2*length1*mass1*cosphi1*cosphi1 - length1*mass1 - length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1 - (length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (2*length1*mass1*cosphi1*cosphi1 - length1*mass1 - length1*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1*vtheta1*vtheta1 - (((g*mass1 + g*mass2)*cosphi1*cosphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((g*mass1 + g*mass2)*cosphi1*cosphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2 - ((length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2*vphi1*vphi1 + 2*(length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2*vphi1*vphi1 + (length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2*vphi1*vphi1)*costheta1)*sintheta1)*costheta2*costheta2 - (((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*vphi1*vphi1 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*vphi1*vphi1 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2*vphi1*vphi1 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*vphi1*vphi1)*sintheta1*sintheta1 - (((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 - ((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*vtheta1*vtheta1 - ((g*mass2*cosphi1*cosphi1*cosphi1 + g*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (g*mass2*cosphi1*cosphi1*sinphi1 + g*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (g*mass2*cosphi1*cosphi1*cosphi1 + g*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (g*mass2*cosphi1*cosphi1*sinphi1 + g*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1)*costheta2*sintheta2 - (((length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta2*sintheta1*vphi2*vphi2 - (2*length1*mass2*cosphi1*cosphi2*sinphi1*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1 - length1*mass1*cosphi1*cosphi1 + (2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1 - length1*mass1 - length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1 - (length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1 - length1*mass1)*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*sintheta1*vtheta1*vtheta1 - (2*g*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (g*mass1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (g*mass1*sinphi1*sinphi1 + (g*mass1 + g*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*vphi1*vphi1)*costheta1)*sintheta1)*sintheta2*sintheta2 - (((length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta2*costheta2*costheta2*sintheta1 - ((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*costheta2*sintheta2 + ((length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1 + length2*mass2*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta2*sintheta1*sintheta2*sintheta2 - ((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta2*sintheta2*sintheta2)*vtheta2*vtheta2)/(2*((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*sintheta2 - (((length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*costheta2*costheta2 - ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1 - (2*length1*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (length1*mass1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length1*mass1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2)*sintheta1*sintheta1)*sintheta2*sintheta2)
}

function DPtheta2dotdot(){
	sintheta1 = Math.sin(theta1)
	sintheta2 = Math.sin(theta2)
	costheta1 = Math.cos(theta1)
	costheta2 = Math.cos(theta2)
	sinphi1   = Math.sin(phi1)
	sinphi2   = Math.sin(phi2)
	cosphi1   = Math.cos(phi1)
	cosphi2   = Math.cos(phi2)
	return (((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1*sintheta2*sintheta2*vphi2*vphi2 - (((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*costheta2*sintheta1 - ((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1*sintheta2*sintheta2 + (((length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + (length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2 - ((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 - ((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1 - 2*(length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2)*sinphi2*sinphi2)*costheta1*costheta1 + (2*length2*mass2*cosphi1*cosphi2*sinphi1*sinphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2 - (length2*mass1*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length2*mass1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*cosphi1*cosphi1 - 2*((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2)*sinphi2*sinphi2)*sintheta1*sintheta1)*costheta2*sintheta2)*vtheta2*vtheta2 - ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*vphi1*vphi1)*sintheta1*sintheta1*sintheta1 + (((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*sintheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*sintheta1)*vtheta1*vtheta1)*costheta2 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*vphi1*vphi1)*costheta1*sintheta1*sintheta1 + (((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1*costheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*sintheta1*sintheta1)*vtheta1*vtheta1 - (((length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*vphi2*vphi2 + (((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*vphi2*vphi2)*costheta2)*sintheta2)/(2*((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*sintheta2 - (((length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 + (((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*costheta2*costheta2 - ((((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1 - (2*length2*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (length2*mass1*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length2*mass1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2)*sintheta1*sintheta1)*sintheta2*sintheta2)
}

function DPphi1dotdot() {
	sintheta1 = Math.sin(theta1)
	sintheta2 = Math.sin(theta2)
	costheta1 = Math.cos(theta1)
	costheta2 = Math.cos(theta2)
	sinphi1   = Math.sin(phi1)
	sinphi2   = Math.sin(phi2)
	cosphi1   = Math.cos(phi1)
	cosphi2   = Math.cos(phi2)
	return ((((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*vphi2*vphi2 + (length2*mass2*cosphi2*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*cosphi2*cosphi2*sinphi2 + length2*mass2*cosphi2*sinphi1*sinphi2*sinphi2 - length2*mass2*cosphi1*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*vphi2*vphi2)*sintheta2*sintheta2*sintheta2 + 2*(((length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2*vphi1 + 2*(length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2*vphi1 + (length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2*vphi1)*costheta1*costheta1*costheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2*vphi1 + 2*((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2*vphi1)*costheta1*sintheta1*sintheta1)*costheta2*costheta2*vtheta1 - (4*((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*vphi1 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*vphi1 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2*vphi1 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*vphi1)*costheta1*costheta1*sintheta1*vtheta1 - ((length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*vphi1*vphi1 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*vphi1*vphi1 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2*vphi1*vphi1 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*vphi1*vphi1)*costheta1*sintheta1*sintheta1 - ((g*mass2*cosphi1*cosphi1*sinphi1 + g*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (g*mass2*cosphi1*cosphi1*cosphi1 + g*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (g*mass2*cosphi1*cosphi1*sinphi1 + g*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (g*mass2*cosphi1*cosphi1*cosphi1 + g*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 - (((length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*costheta1 + ((length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1*sintheta1)*vtheta1*vtheta1)*costheta2*sintheta2 + ((length1*mass2*cosphi1*cosphi2*cosphi2*sinphi1*vphi1*vphi1 - length1*mass2*cosphi1*sinphi1*sinphi2*sinphi2*vphi1*vphi1 - (length1*mass2*cosphi1*cosphi1 - length1*mass2*sinphi1*sinphi1)*cosphi2*sinphi2*vphi1*vphi1)*sintheta1*sintheta1*sintheta1 + (g*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - g*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (g*mass2*cosphi1*cosphi1 - g*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*costheta1*sintheta1 + ((length1*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - length1*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (length1*mass2*cosphi1*cosphi1 - length1*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*costheta1*costheta1*sintheta1 + (length1*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - length1*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (length1*mass2*cosphi1*cosphi1 - length1*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*sintheta1*sintheta1*sintheta1)*vtheta1*vtheta1 + 2*((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*vphi1)*costheta1*costheta1*costheta1 - (2*length1*mass2*cosphi1*cosphi2*sinphi1*sinphi2*vphi1 - (length1*mass1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*vphi1 - (length1*mass1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2*vphi1)*costheta1*sintheta1*sintheta1)*vtheta1)*sintheta2*sintheta2 + ((((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 + (length2*mass2*cosphi2*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*cosphi2*cosphi2*sinphi2 + length2*mass2*cosphi2*sinphi1*sinphi2*sinphi2 - length2*mass2*cosphi1*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*costheta2*costheta2*sintheta2 + (((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 + (length2*mass2*cosphi2*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*cosphi2*cosphi2*sinphi2 + length2*mass2*cosphi2*sinphi1*sinphi2*sinphi2 - length2*mass2*cosphi1*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*sintheta2*sintheta2*sintheta2)*vtheta2*vtheta2)/(2*((length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*cosphi1 + length1*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length1*mass2*cosphi1*cosphi1*sinphi1 + length1*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*sintheta1*sintheta2 - (((length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length1*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length1*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length1*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*sintheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*sintheta1)*costheta2*costheta2 - ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1*sintheta1 - (2*length1*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (length1*mass1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length1*mass1*sinphi1*sinphi1 + (length1*mass1 + length1*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2)*sintheta1*sintheta1*sintheta1)*sintheta2*sintheta2)
}

function DPphi2dotdot() {
	sintheta1 = Math.sin(theta1)
	sintheta2 = Math.sin(theta2)
	costheta1 = Math.cos(theta1)
	costheta2 = Math.cos(theta2)
	sinphi1   = Math.sin(phi1)
	sinphi2   = Math.sin(phi2)
	cosphi1   = Math.cos(phi1)
	cosphi2   = Math.cos(phi2)
	return -((length2*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1 - length2*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*sintheta1*sintheta1*sintheta2*sintheta2*sintheta2*vphi2*vphi2 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*vphi1*vphi1 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*vphi1*vphi1 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2*vphi1*vphi1 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*vphi1*vphi1)*sintheta1*sintheta1*sintheta1 + (((g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - ((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - ((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*sintheta1 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*sintheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*sintheta1)*vtheta1*vtheta1)*costheta2*costheta2 + (((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*vphi2*vphi2 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2*vphi1*vphi1 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2*vphi1*vphi1)*sintheta1*sintheta1*sintheta1 + (((g*mass1 + g*mass2)*cosphi1*cosphi1*sinphi1 + (g*mass1 + g*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2 - ((g*mass1 + g*mass2)*cosphi1*cosphi1*cosphi1 + (g*mass1 + g*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2)*costheta1*sintheta1 + ((((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2)*costheta1*costheta1*sintheta1 + (((length1*mass1 + length1*mass2)*cosphi1*cosphi1*sinphi1 + (length1*mass1 + length1*mass2)*sinphi1*sinphi1*sinphi1)*cosphi2 - ((length1*mass1 + length1*mass2)*cosphi1*cosphi1*cosphi1 + (length1*mass1 + length1*mass2)*cosphi1*sinphi1*sinphi1)*sinphi2)*sintheta1*sintheta1*sintheta1)*vtheta1*vtheta1)*sintheta2*sintheta2 + (((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*costheta2*costheta2*sintheta1 + (length2*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1 - length2*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*costheta2*costheta2*sintheta1*sintheta1*sintheta2 + ((length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*sintheta2*sintheta2 + (length2*mass2*cosphi1*cosphi2*cosphi2*sinphi1 - length2*mass2*cosphi1*sinphi1*sinphi2*sinphi2 - (length2*mass2*cosphi1*cosphi1 - length2*mass2*sinphi1*sinphi1)*cosphi2*sinphi2)*sintheta1*sintheta1*sintheta2*sintheta2*sintheta2)*vtheta2*vtheta2 + 2*(2*((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*costheta2*sintheta1*sintheta2*vphi2 - (((length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1*vphi2 + (((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1*vphi2)*costheta2*costheta2*costheta2 - ((((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1*vphi2 - (2*length2*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (length2*mass1*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length2*mass1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2)*sintheta1*sintheta1*vphi2)*costheta2*sintheta2*sintheta2)*vtheta2)/(2*((length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*cosphi1 + length2*mass2*cosphi1*sinphi1*sinphi1)*cosphi2*sinphi2*sinphi2 + (length2*mass2*cosphi1*cosphi1*sinphi1 + length2*mass2*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2)*costheta1*costheta2*sintheta1*sintheta2*sintheta2 - (((length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*(length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + (length2*mass1*cosphi1*cosphi1*cosphi1*cosphi1 + 2*length2*mass1*cosphi1*cosphi1*sinphi1*sinphi1 + length2*mass1*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*costheta1*costheta1 + (((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*cosphi2*cosphi2 + 2*((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2*sinphi2*sinphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*sinphi2*sinphi2*sinphi2*sinphi2)*sintheta1*sintheta1)*costheta2*costheta2*sintheta2 - ((((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*cosphi2*cosphi2 + ((length2*mass1 + length2*mass2)*cosphi1*cosphi1*cosphi1*cosphi1 + 2*(length2*mass1 + length2*mass2)*cosphi1*cosphi1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1*sinphi1*sinphi1)*sinphi2*sinphi2)*costheta1*costheta1 - (2*length2*mass2*cosphi1*cosphi2*sinphi1*sinphi2 - (length2*mass1*cosphi1*cosphi1 + (length2*mass1 + length2*mass2)*sinphi1*sinphi1)*cosphi2*cosphi2 - (length2*mass1*sinphi1*sinphi1 + (length2*mass1 + length2*mass2)*cosphi1*cosphi1)*sinphi2*sinphi2)*sintheta1*sintheta1)*sintheta2*sintheta2*sintheta2)
}